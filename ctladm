#!/usr/bin/python3

import argparse
from rtslib_fb import (Target, TPG, NodeACL, FabricModule, BlockStorageObject,
                       RTSRoot, NetworkPortal, LUN, MappedLUN, RTSLibError,
                       RTSLibNotInCFS, NodeACLGroup)
from configparser import ConfigParser
from xml.dom import minidom


def debug_log(*messages):
    with open("/var/log/ctladm.log", "a") as log_file:
        message = map(lambda x: str(x), list(messages))
        log_file.write('\n'.join(list(message)))
        log_file.write('\n')
        log_file.close()


def get_devlist(rtsroot, xml_output=False):
    devlist = []
    tpgs = list(rtsroot.tpgs)
    for tpg in tpgs:
        for lun in tpg.luns:
            devlist.append(list(map(lambda x: str(x), [
                lun.storage_object.name,
                lun.storage_object.plugin,
                int(lun.storage_object.size/512),
                512,
                lun.storage_object.wwn,
                tpg.parent_target.wwn[tpg.parent_target.wwn.rfind(':')+1:],
                lun.storage_object.udev_path,
                tpg.parent_target.wwn
            ])))
    debug_log("Command: devlist", "Args: noargs\n")
    if xml_output:
        xml_root = minidom.Document()
        declaration = xml_root.toxml()  # Used to strip declaration string later
        xml = xml_root.createElement('ctllunlist')
        xml_root.appendChild(xml)
        for dev in devlist:
            lun = xml_root.createElement('lun')
            lun.setAttribute('id', dev[0])
            elem = xml_root.createElement('backend_type')
            text = xml_root.createTextNode(dev[1])
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('lun_type')
            text = xml_root.createTextNode('0')
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('size')
            text = xml_root.createTextNode(dev[2])
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('blocksize')
            text = xml_root.createTextNode(dev[3])
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('serial_number')
            text = xml_root.createTextNode(dev[4])
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('device_id')
            text = xml_root.createTextNode(dev[5])
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('num_threads')
            text = xml_root.createTextNode('14')
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('file')
            text = xml_root.createTextNode(dev[6])
            elem.appendChild(text)
            lun.appendChild(elem)
            elem = xml_root.createElement('ctld_name')
            text = xml_root.createTextNode(','.join([dev[7], 'lun', '0']))
            elem.appendChild(text)
            lun.appendChild(elem)
            xml.appendChild(lun)
        xml_str = xml_root.toprettyxml(indent="\t")[(len(declaration)+1):]
        return xml_str
    else:
        return [dev[0:6] for dev in devlist]


def get_portlist(rtsroot, xml_output=False):
    portlist = []
    for lun in rtsroot.luns:
        portlist.append([
            lun.storage_object.name,
            'YES' if lun.storage_object.status == 'activated' else 'NO',
            lun.parent_tpg.parent_target.fabric_module.name,
            lun.parent_tpg.parent_target.fabric_module.name,
            ','.join([lun.parent_tpg.parent_target.wwn, 't', '0x0101']),
            lun.parent_tpg.parent_target.wwn
        ])
    sessions = list(rtsroot.sessions)
    islist = {}
    for session in sessions:
        islist[session['parent_nodeacl'].parent_tpg.parent_target.wwn] = session['parent_nodeacl'].node_wwn

    debug_log("Command: portlist\n")
    if xml_output:
        xml_root = minidom.Document()
        # Used to strip declaration string later
        declaration = xml_root.toxml()

        xml = xml_root.createElement('ctlportlist')
        xml_root.appendChild(xml)
        for port in portlist:
            targ_port = xml_root.createElement('targ_port')
            targ_port.setAttribute('id', port[0])
            elem = xml_root.createElement('lun')
            elem.setAttribute('id', '0')
            text = xml_root.createTextNode(port[0])
            elem.appendChild(text)
            targ_port.appendChild(elem)
            elem = xml_root.createElement('target')
            text = xml_root.createTextNode(port[5])
            elem.appendChild(text)
            targ_port.appendChild(elem)
            elem = xml_root.createElement('initiator')
            initiator = ""
            if port[5] in islist.keys():
                initiator = islist[port[5]]
            text = xml_root.createTextNode(initiator)
            elem.appendChild(text)
            targ_port.appendChild(elem)
            xml.appendChild(targ_port)
        xml_str = xml_root.toprettyxml(indent="\t")[(len(declaration)+1):]
        return xml_str
    else:
        return [port[0:5] for port in portlist]


def get_portlist_qvp(rtsroot, port):
    portlist = {}
    for lun in rtsroot.luns:
        portlist[lun.storage_object.name] = {
            'Target': lun.parent_tpg.parent_target.wwn,
            'LUN 0': lun.storage_object.name
        }

    print('Target: {}'.format(portlist[str(port)]['Target']))
    print('LUN 0: {}'.format(portlist[str(port)]['LUN 0']))
    debug_log("portlist qvp")


def get_islist(rtsroot):
    sessions = list(rtsroot.sessions)
    islist = []
    for session in sessions:
        portal = list(session['parent_nodeacl'].parent_tpg.network_portals)[0].ip_address
        islist.append(list(map(lambda x: str(x), [session['id'], portal,
                      session['parent_nodeacl'].node_wwn,
                      session['parent_nodeacl'].parent_tpg.parent_target.wwn]))
                      )
    debug_log("Command: islist\n")
    return islist


def create_lun(rtsroot, portal_address, options, deviceid, lun, acl):
    opt_file = options[0].split('=')[1]
    opt_iqn = options[2].split('=')[1].split(',')[0]
    opt_serial = "1FREE_TT_{}".format(deviceid)
    debug_log("Command: create lun ", "LUN Serial: {}".format(opt_serial), "Device ID: {}\n".format(deviceid))
    print(' File: {} deviceid: {} iqn: {} lun {}'.format(opt_file, deviceid,
          opt_iqn, lun))
    fm = FabricModule('iscsi')
    so = BlockStorageObject(lun, opt_file, wwn=opt_serial)
    t = Target(fm, wwn=opt_iqn)
    tpg = TPG(t, 1)
    tpg.enable = True
    tpg.set_attribute("authentication", '0')
    tpg_lun = LUN(tpg, storage_object=so)
    MappedLUN(na, 0, tpg_lun)
    na = NodeACL(tpg, acl)
    NetworkPortal(tpg, ip_address=portal_address)
    rtsroot.save_to_file()
    debug_log("Command: create lun\n", "Portal address: {}".format(portal_address), 
              "Options: {}".format(options), "Device ID: {}".format(deviceid),
              "LUN: {}".format(lun), "ACL: {}".format(acl))


def remove_lun(rtsroot, lun):
    for lun2 in rtsroot.luns:
        if lun2.storage_object.name == lun:
            print(lun2.parent_tpg.parent_target.wwn)
            print(lun2.storage_object.name)
            tgt_to_delete = lun2.parent_tpg.parent_target
            so_to_delete = lun2.storage_object
            tgt_to_delete.delete()
            so_to_delete.delete()
    rtsroot.save_to_file()
    debug_log("Command: remove lun LUN: {}".format(lun))


def print_result(result):
    if type(result) is str:
        print(result)
    else:
        for res in result:
            print('\t'.join(res))


def read_config(inifile="/etc/ctladm/ctladm.ini"):
    config = ConfigParser()
    ctladm_settings = {}
    config.read(inifile)
    sections = config.sections()
    if sections:
        for section in sections:
            ctladm_settings[section] = {}
            for item in config.items(section):
                ctladm_settings[section][item[0]] = item[1]
    else:
        print('ERROR: Empty config file!')
    return ctladm_settings


def main(args):
    debug_log(args)
    ctladm_config = read_config()
    acls = ctladm_config['ACLS']
    portal_address = ctladm_config['Portal']['ipaddress']
    root = RTSRoot()
    if args.command == 'devlist':
        print_result(get_devlist(root, args.x))
    if args.command == 'islist':
        print_result(get_islist(root))
    if args.command == 'portlist' and not args.qvp:
        print_result(get_portlist(root, args.x))
    if args.command == 'portlist' and args.qvp:
        get_portlist_qvp(root, args.qvp)
    if args.command == 'create':
        vm_name = args.d[args.d.rfind('-')+1:]
        create_lun(root, portal_address, args.o, args.d, args.l, acls[vm_name])
    if args.command == 'remove':
        remove_lun(root, args.l)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Linux ctladm for PlayKey zfsapi')
    parser.add_argument('command', type=str, action='store',
                        help='ctladm command')
    parser.add_argument('-q', action='store_true', help='Omit header')
    parser.add_argument('-qvp', type=int, action='store', required=False,
                        help='Omit header, verbose, specify port number')
    parser.add_argument('-b', type=str, action='store', help='Device type')
    parser.add_argument('-o', type=str, action='append', help='Create options')
    parser.add_argument('-d', type=str, action='store', help='Device ID')
    parser.add_argument('-l', type=str, action='store', help='LUN')
    parser.add_argument('-x', action='store_true', help='XML Output')

    args = parser.parse_args()
    main(args)
